######################################################################
# Automatically generated by qmake (2.01a) Sat 3. Jun 19:53:19 2017
######################################################################
TEMPLATE       = app
TARGET         = LDView
QT            += core
QT            += opengl
QT            += network
QT            -= gui
CONFIG        += qt
CONFIG        += opengl
CONFIG        += thread
CONFIG        += static
CONFIG        += warn_on
win32: CONFIG -= console
macx:  CONFIG += app_bundle

contains(QT_VERSION, ^5\\..*): \
QT            += printsupport

QMAKE_CXXFLAGS+= $(Q_CXXFLAGS)
QMAKE_CFLAGS  += $(Q_CFLAGS)
QMAKE_LFLAGS  += $(Q_LDFLAGS)

contains(DEFINES, _OSMESA): \
DEFINES       -= _OSMESA
DEFINES       += _QT

include(../LDViewGlobal.pri)

DEFINES += VERSION_INFO=\\\"$$VERSION\\\"
DEFINES += ARCH=\\\"$$join(ARCH,,,bit)\\\"
DEFINES += QT_THREAD_SUPPORT
DEFINES += QOFFSCREEN
LANGUAGE     = C++
DBFILE       = $${TARGET}.db
INCLUDEPATH += $$DESTDIR/.ui$${POSTFIX}
UI_DIR       = $$DESTDIR/.ui$${POSTFIX}
MOC_DIR      = $$DESTDIR/.moc$${POSTFIX}
RCC_DIR      = .qrc$${POSTFIX}

message("~~~ $$upper($${TARGET}) ($$join(ARCH,,,bit)) VERSION $$VERSION CUI EXECUTABLE - $${BUILD} ~~~")

unix|msys!macx: TARGET = $$lower($${TARGET})

INCLUDEPATH += ../LDLib ../TRE ../TCFoundation ../LDLoader ../LDExporter
INCLUDEPATH += $${LIBS_INC}

exists($$[QT_INSTALL_BINS]/lrelease){
    LRELEASE = $$[QT_INSTALL_BINS]/lrelease
    message("~~~ lrelease found at $$[QT_INSTALL_BINS] ~~~")
} else {
    LRELEASE = lrelease
}

unix:!macx {
    USE_BOOST {
        BOOSTLIB = -lboost_thread
        exists(/usr/lib/libboost_thread-mt.so*){
            BOOSTLIB = -lboost_thread-mt
        }
        exists(/usr/local/lib/libboost_thread-mt.so*){
            BOOSTLIB = -lboost_thread-mt
        }
        exists(/usr/lib64/libboost_thread-mt.so*){
            BOOSTLIB = -lboost_thread-mt
        }
        exists(/usr/local/lib64/libboost_thread-mt.so*){
            BOOSTLIB = -lboost_thread-mt
        }
        exists(/usr/lib/i386-linux-gnu/libboost_system.so*){
            BOOSTLIB += -lboost_system
        }
        exists(/usr/lib/x86_64-linux-gnu/libboost_system.so*){
            BOOSTLIB += -lboost_system
        }
    }

    exists(/usr/bin/kf5-config){
        message("~~~ KF5 found ~~~")
        KDESERVICES=$${DATADIR}/kservices5
        DESKTOPFILE=kde5/ldviewthumbnailcreator.desktop
    }
    exists(/usr/bin/kde4-config){
       message("~~~ KDE4 found ~~~")
       isEmpty(KDESERVICES) {
           KDESERVICES=$${DATADIR}/kde4/services
           DESKTOPFILE=kde/ldviewthumbnailcreator.desktop
       }
    }
    exists($$[QT_INSTALL_BINS]/lrelease){
        LRELEASE = $$[QT_INSTALL_BINS]/lrelease
        message("~~~ $$[QT_INSTALL_BINS]/lrelease found ~~~")
    } else {
        LRELEASE = lrelease
    }
    system("g++ --help -v 2>/dev/null| grep -q std=c++11"){
        message("~~~ C++11 feature found ~~~")
    }
    system("g++ --help -v 2>/dev/null| grep -q std=c++17"){
        message("~~~ C++17 feature found ~~~")
    }

    !macx: !3RD_PARTY_INSTALL {

        isEmpty(PREFIX):PREFIX          = /usr
        isEmpty(BINDIR):BINDIR          = $$PREFIX/bin
        isEmpty(DATADIR):DATADIR        = $$PREFIX/share
        isEmpty(DOCDIR):DOCDIR          = $$DATADIR/doc
        isEmpty(MANDIR):MANDIR          = $$DATADIR/man
        isEmpty(MIMEICONDIR):MIMEICONDIR= $$DATADIR/icons/gnome/32x32/mimetypes
        isEmpty(SYSCONFDIR):SYSCONFDIR  = /etc

        documentation.depends += compiler_translations_make_all
        documentation.path     = $${DOCDIR}/ldview
        documentation.files    = ../Readme.txt ../Help.html ../license.txt \
                                 ../m6459.ldr \
                                 ../ChangeHistory.html ../8464.mpd todo.txt \
                                 ../Textures/SansSerif.fnt \
                                 ../LDExporter/LGEO.xml \
                                 ldview_de.qm ldview_cz.qm ldview_it.qm \
                                 ldview_en.qm ldview_hu.qm
        INSTALLS += documentation

        target.path      = $${BINDIR}
        script.path      = $${BINDIR}
        script.extra     = $(INSTALL_PROGRAM) desktop/ldraw-thumbnailer $(INSTALL_ROOT)$${BINDIR}
        man.path         = $${MANDIR}/man1
        man.extra        = $(INSTALL_FILE) LDView.1 desktop/ldraw-thumbnailer.1 $(INSTALL_ROOT)$${MANDIR}/man1 ; $(COMPRESS) $(INSTALL_ROOT)$${MANDIR}/man1/*.1
        mimeinfo.path    = $${DATADIR}/mime-info
        mimeinfo.files   = desktop/ldraw.mime desktop/ldraw.keys
        mimepack.path    = $${DATADIR}/mime/packages
        mimepack.files   = desktop/ldraw.xml
        appreg.path      = $${DATADIR}/application-registry
        appreg.files     = desktop/ldview.applications
        apps.path        = $${DATADIR}/applications
        apps.files       = desktop/ldview.desktop
        thumbnailer.path = $${DATADIR}/thumbnailers
        thumbnailer.files= desktop/ldview.thumbnailer
        schema.path      = $${SYSCONFDIR}/gconf/schemas
        schema.files     = desktop/ldraw.schemas
        icon1.path       = $${MIMEICONDIR}
        icon1.extra      = $(INSTALL_FILE) images/LDViewIcon.png $(INSTALL_ROOT)$${MIMEICONDIR}/gnome-mime-application-x-ldraw.png
        icon2.path       = $${MIMEICONDIR}
        icon2.extra      = $(INSTALL_FILE) images/LDViewIcon.png $(INSTALL_ROOT)$${MIMEICONDIR}/gnome-mime-application-x-multipart-ldraw.png
        icon3.path       = $${DATADIR}/pixmaps
        icon3.extra      = $(INSTALL_FILE) images/LDViewIcon128.png $(INSTALL_ROOT)$${DATADIR}/pixmaps/gnome-ldraw.png
        icon4.path       = $${DATADIR}/pixmaps
        icon4.extra      = $(INSTALL_FILE) images/LDViewIcon128.png $(INSTALL_ROOT)$${DATADIR}/pixmaps/ldview.png
        kdeserv.path     = $${DATADIR}/kde4/services
        kdeserv.files    = kde/ldviewthumbnailcreator.desktop
        INSTALLS        += target man mimeinfo mimepack appreg \
                           apps thumbnailer icon1 icon2 icon3 icon4 script schema kdeserv

        initrans_hu.path  = $${DATADIR}/ldview
        initrans_hu.extra = $(INSTALL_FILE) ../Translations/Hungarian/LDViewMessages.ini \
                $(INSTALL_ROOT)/$${DATADIR}/ldview/LDViewMessages_hu.ini
        initrans_cz.path  = $${DATADIR}/ldview
        initrans_cz.extra = $(INSTALL_FILE) ../Translations/Czech/LDViewMessages.ini \
                $(INSTALL_ROOT)/$${DATADIR}/ldview/LDViewMessages_cz.ini
        initrans_de.path  = $${DATADIR}/ldview
        initrans_de.extra = $(INSTALL_FILE) ../Translations/German/LDViewMessages.ini \
                $(INSTALL_ROOT)/$${DATADIR}/ldview/LDViewMessages_de.ini
        initrans_it.path  = $${DATADIR}/ldview
        initrans_it.extra= $(INSTALL_FILE) ../Translations/Italian/LDViewMessages.ini \
                $(INSTALL_ROOT)/$${DATADIR}/ldview/LDViewMessages_it.ini
        initrans_en.path  = $${DATADIR}/ldview
        initrans_en.extra = cat ../LDViewMessages.ini ../LDExporter/LDExportMessages.ini \
                                > $(INSTALL_ROOT)/$${DATADIR}/ldview/LDViewMessages.ini
        INSTALLS += initrans_hu initrans_de initrans_cz initrans_it initrans_en
    }

    ini.depends = ../LDViewMessages.ini ../LDExporter/LDExportMessages.ini
    ini.target = LDViewMessages.ini
    ini.commands = cat ../LDViewMessages.ini ../LDExporter/LDExportMessages.ini \
                             > LDViewMessages.ini
    QMAKE_EXTRA_TARGETS += ini
    PRE_TARGETDEPS += LDViewMessages.ini
    QMAKE_CLEAN += LDViewMessages.ini

    LIBS      += -L../TCFoundation -L../LDLib -L../LDLoader -L../TRE -lLDraw$$POSTFIX -L../LDExporter
    LIBS      += $${LIBS_DIR}
    macx:LIBS += $${OSX_FRAMEWORKS_CORE}
}

3RD_PARTY_INSTALL {
    message("~~~ QT CUI 3RD PARTY INSTALL PREFIX $${3RD_PREFIX} ~~~")

    isEmpty(3RD_PACKAGE_VER):3RD_PACKAGE_VER = $$TARGET-$$VER_MAJ"."$$VER_MIN
    isEmpty(3RD_BINDIR):3RD_BINDIR           = $$absolute_path($$3RD_PREFIX/$$3RD_PACKAGE_VER/bin/$$QT_ARCH)
    isEmpty(3RD_LIBDIR):3RD_LIBDIR           = $$absolute_path($$3RD_PREFIX/$$3RD_PACKAGE_VER/lib/$$QT_ARCH)
    isEmpty(3RD_DOCDIR):3RD_DOCDIR           = $$absolute_path($$3RD_PREFIX/$$3RD_PACKAGE_VER/docs)
    isEmpty(3RD_RESOURCES):3RD_RESOURCES     = $$absolute_path($$3RD_PREFIX/$$3RD_PACKAGE_VER/resources)
    isEmpty(3RD_HEADERS):3RD_HEADERS         = $$absolute_path($$3RD_PREFIX/$$3RD_PACKAGE_VER/include)

    HEADER_CHECK_MSG = Project MESSAGE: ~~~ $$upper( $$TARGET ) HEADERS COPIED TO $${3RD_HEADERS} ~~~

    mingw:ide_qtcreator {
        DELETE_HEADER_FOLDERS_CMD = IF EXIST \"$$shell_path($${3RD_HEADERS})\" \( RD /S /Q $$shell_path($${3RD_HEADERS}) \)
        CREATE_HEADER_FOLDERS_CMD = MD
        COPY_CMD = COPY /V /Y
        HEADER_CHECK_CMD = IF EXIST \"$$shell_path($${3RD_HEADERS}/TCFoundation/TCObject.h)\" \( ECHO $${HEADER_CHECK_MSG} \)
    } else {
        DELETE_HEADER_FOLDERS_CMD = if test -e $$shell_path($${3RD_HEADERS}); then rm -rf $$shell_path($${3RD_HEADERS}); fi;
        CREATE_HEADER_FOLDERS_CMD = mkdir -p
        COPY_CMD = cp -f
        HEADER_CHECK_CMD = if test -f $$shell_path($${3RD_HEADERS}/TCFoundation/TCObject.h); then echo $${HEADER_CHECK_MSG}; fi
    }
    #message("~~~ DEBUG_DELETE_HEADER_FOLDERS_CMD: $$DELETE_HEADER_FOLDERS_CMD ~~~")

    CREATE_HEADER_FOLDERS_CMD += \
        $$shell_path($${3RD_HEADERS}/LDExporter) \
        $$shell_path($${3RD_HEADERS}/LDLib) \
        $$shell_path($${3RD_HEADERS}/LDLoader) \
        $$shell_path($${3RD_HEADERS}/TRE) \
        $$shell_path($${3RD_HEADERS}/TCFoundation) \
        $$shell_path($${3RD_HEADERS}/GL)
    msys: \
    CREATE_HEADER_FOLDERS_CMD += \
        $$shell_path($${3RD_HEADERS}/3rdParty) 2> $$NULL_DEVICE
    else: \
    CREATE_HEADER_FOLDERS_CMD += \
        $$shell_path($${3RD_HEADERS}/3rdParty/minizip) 2> $$NULL_DEVICE
    #message("~~~ DEBUG_CREATE_HEADER_FOLDERS_CMD: $$CREATE_HEADER_FOLDERS_CMD ~~~")

    COPY_HEADERS_CMD = $${COPY_CMD} $$shell_path($$absolute_path(../TCFoundation/*.h)) $$shell_path($${3RD_HEADERS}/TCFoundation/) \
        $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../LDExporter/*.h)) $$shell_path($${3RD_HEADERS}/LDExporter/) \
        $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../LDLoader/*.h)) $$shell_path($${3RD_HEADERS}/LDLoader/) \
        $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../LDLib/*.h)) $$shell_path($${3RD_HEADERS}/LDLib/) \
        $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../TRE/*.h)) $$shell_path($${3RD_HEADERS}/TRE/) \
        $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../include/*.h)) $$shell_path($${3RD_HEADERS}/3rdParty/) \
        $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../include/GL/*.h)) $$shell_path($${3RD_HEADERS}/GL/)
    !msys: \
    COPY_HEADERS_CMD += \
        $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../3rdParty/minizip/*.h)) $$shell_path($${3RD_HEADERS}/3rdParty/minizip/)

    delete_header_folders.target = DeleteHeaderFolders
    delete_header_folders.commands = $${DELETE_HEADER_FOLDERS_CMD}

    create_header_folders.target = CreateHeaderFolders
    create_header_folders.depends = DeleteHeaderFolders
    create_header_folders.commands = $${CREATE_HEADER_FOLDERS_CMD}

    copy_headers.target = CopyHeaders
    copy_headers.depends = CreateHeaderFolders
    copy_headers.commands = $${COPY_HEADERS_CMD}

    copy_headers_check.target = HeadersCheck
    copy_headers_check.depends = CopyHeaders
    copy_headers_check.commands = $${HEADER_CHECK_CMD}

    QMAKE_EXTRA_TARGETS += delete_header_folders create_header_folders copy_headers copy_headers_check
    PRE_TARGETDEPS += CopyHeaders HeadersCheck

    target.path              = $${3RD_BINDIR}
    documentation.path       = $${3RD_DOCDIR}
    documentation.files      = ../Readme.txt ../Help.html ../license.txt \
                               ../ChangeHistory.html ldview.1
    resources.path           = $${3RD_RESOURCES}
    resources.files          = ../m6459.ldr ../8464.mpd ldviewrc.sample \
                               ../LDViewMessages.ini ../LDExporter/LDExportMessages.ini \
                               ../LDExporter/LGEO.xml
    resources_config.path    = $${3RD_RESOURCES}/config
    resources_config.files   = ldview.ini ldviewPOV.ini LDViewCustomIni

    libraries.path           = $${3RD_LIBDIR}
    libraries.files          = ../LDLoader/$$DESTDIR/$${LIB_LDLOADER} \
                               ../LDLib/$$DESTDIR/$${LIB_LDLIB} \
                               ../LDExporter/$$DESTDIR/$${LIB_LDEXPORTER} \
                               ../TRE/$$DESTDIR/$${LIB_TRE} \
                               ../TCFoundation/$$DESTDIR/$${LIB_TCFOUNDATION}

    contains(USE_3RD_PARTY_3DS, YES) {
        exists($$OUT_PWD/$${3DS_LDLIBS}): 3DS_LIB_FOUND = YES
        else: message("~~~ 3DS Library not found at $$OUT_PWD/$${3DS_LDLIBS} ~~~")
    } else:USE_3RD_PARTY_PREBUILT_3DS {
        # pre-built 3ds path is already abs so use without $$OUT_PWD
        exists($${3DS_LDLIBS}): 3DS_LIB_FOUND = YES
        else: message("~~~ 3DS Library not found at $${3DS_LDLIBS} ~~~")
    }
    contains(3DS_LIB_FOUND, YES) {
        # Treat Mageia 'error adding symbols: Archive has no index...'
        contains(HOST,Mageia) {
            message("~~~ COPY lib$${LIB_3DS}.$${EXT_S} TO $${3RD_LIBDIR}/ ~~~")
            3RD_3DS_COPY_CMD    = if ! test -e $${3RD_LIBDIR}; then mkdir -p $${3RD_LIBDIR}; fi; \
                                  cp -f $${3DS_LDLIBS} $${3RD_LIBDIR}/
            system( $${3RD_3DS_COPY_CMD} )
        } else {
            libraries.files    += $${3DS_LDLIBS}
        }
    }
    contains(USE_3RD_PARTY_PNG, YES) {
        exists($$OUT_PWD/$${PNG_LDLIBS}): \
        libraries.files += $${PNG_LDLIBS}
        else: message("~~~ PNG Library not found at $$OUT_PWD/$${PNG_LDLIBS} ~~~")
    }
    contains(USE_3RD_PARTY_JPEG, YES) {
        exists($$OUT_PWD/$${JPEG_LDLIBS}): \
        libraries.files         += $${JPEG_LDLIBS}
        else: message("~~~ JPEG Library not found at $$OUT_PWD/$${JPEG_LDLIBS} ~~~")
    }
    contains(USE_3RD_PARTY_GL2PS, YES) {
        exists($$OUT_PWD/$${GL2PS_LDLIBS}): \
        libraries.files         += $${GL2PS_LDLIBS}
        else: message("~~~ GL2PS Library not found at $$OUT_PWD/$${GL2PS_LDLIBS} ~~~")
    }
    contains(USE_3RD_PARTY_TINYXML, YES) {
        exists($$OUT_PWD/$${TINYXML_LDLIBS}): \
        libraries.files         += $${TINYXML_LDLIBS}
        else: message("~~~ TINYXML Library not found at $$OUT_PWD/$${TINYXML_LDLIBS} ~~~")
    }
    contains(USE_3RD_PARTY_MINIZIP, YES):!USE_3RD_PARTY_PREBUILT_MINIZIP {
        exists($$OUT_PWD/$${MINIZIP_LDLIBS}): \
        libraries.files         += $${MINIZIP_LDLIBS}
        else: message("~~~ MINIZIP Library not found at $$OUT_PWD/$${MINIZIP_LDLIBS} ~~~")
    } else:USE_3RD_PARTY_PREBUILT_MINIZIP {
        # pre-built minizip path is already abs so use without $$OUT_PWD
        exists($${MINIZIP_LDLIBS}): \
        libraries.files    += $${MINIZIP_LDLIBS}
        else: message("~~~ MINIZIP Library not found at $${MINIZIP_LDLIBS} ~~~")
    }

    INSTALLS += target documentation resources resources_config libraries

}

# Need to look at this more closely...
win32 {
    QMAKE_CXXFLAGS_RELEASE += /FI winsock2.h /FI winsock.h
#
# supress boost 1.42 warnings
#
    QMAKE_CXXFLAGS_RELEASE += /wd4675

    DEFINES += _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_DEPRECATE=1 _CRT_NONSTDC_NO_WARNINGS=1

    QMAKE_TARGET_COMPANY = "LDView"
    QMAKE_TARGET_DESCRIPTION = "LDView"
    QMAKE_TARGET_COPYRIGHT = "Copyright (c) 2017 Travis Cobbs, Peter Bartfai"
    QMAKE_TARGET_PRODUCT = "LDView ($$join(ARCH,,,bit))"
    RC_LANG = "English (United Kingdom)"
    RC_ICONS = "LDViewIcon.ico"

    ini.commands = copy /y /a ..\LDViewMessages.ini+..\LDExporter\LDExportMessages.ini LDViewMessages.ini
    ini.target = LDViewMessages.ini
    ini.depends = ../LDViewMessages.ini ../LDExporter/LDExportMessages.ini
    QMAKE_EXTRA_TARGETS += ini
    PRE_TARGETDEPS += LDViewMessages.ini

    DEFINES     += _TC_STATIC
    INCLUDEPATH += ../../boost_1_33_1
    LIBS += -L../Build/TCFoundation/Release -L../Build/LDLib/Release -L../Build/LDLoader/Release \
            -L../Build/TRE/Release -lLDLib -L../Build/LDExporter/Release -lunzip32 \
            -L../Build/gl2ps/Release
    exists ($(VCINSTALLDIR)/bin/cl.exe) {
            LIBS += -ltinyxml -llibboost_thread-vc90-mt-s -L../Build/tinyxml/Release
    }
    exists ($(VCTOOLKITINSTALLDIR)/bin/cl.exe) {
            LIBS += -ltinyxml_STL-vc2003 -llibboost_thread-vc71-mt-s
    }
    contains(DEFINES, EXPORT_3DS) {
            LIBS += -llib3ds
    }
}

translations.input = TRANSLATIONS
translations.output = ${QMAKE_FILE_BASE}.qm
translations.commands = $$LRELEASE ${QMAKE_FILE_IN} -qm ${QMAKE_FILE_BASE}.qm
translations.CONFIG = no_link
QMAKE_EXTRA_COMPILERS += translations
#PRE_TARGETDEPS += compiler_translations_make_all
QMAKE_CLEAN += *.qm

LIBS += -lLDLoader$$POSTFIX -lTRE$$POSTFIX -lTCFoundation$$POSTFIX

unix: \
LIBS += -ljpeg -l$${LIB_PNG} -lGL -lGLU

win32: \
LIBS += -llibjpeg-vc2005

LIBS += -lgl2ps -lLDExporter$$POSTFIX -lz

unix {
# This has to be down here, because -ltinyxml has to come after -lLDExporter.
    LIBS += -ltinyxml

    contains(DEFINES, EXPORT_3DS): \
    LIBS += -l$${LIB_3DS}

# Use static boost library on Ubuntu and other systems that have it in
# /usr/lib.

    USE_BOOST {
        linux-g++-64 {
            exists(/usr/lib64/libboost_thread-mt.a): {
                 BOOSTLIB = /usr/lib64/libboost_thread-mt.a
            }
        } else {
            exists(/usr/lib/libboost_thread-mt.a){
                BOOSTLIB = /usr/lib/libboost_thread-mt.a
            }
            exists(../boost/lib/libboost_thread.a){
                BOOSTLIB = ../boost/lib/libboost_thread.a
            }
        }
    }
}

USE_BOOST: \
LIBS += $$BOOSTLIB

macx {
# This has to be down here, because -ltinyxml has to come after -lLDExporter.
    LIBS   += -ltinyxml
    RC_FILE = images/LDView.icns
    helpfile.target = LDView.app/Contents/MacOS/Help.html
    helpfile.commands = @$(CHK_DIR_EXISTS) LDView.app/Contents/MacOS/ || \
            $(MKDIR) LDView.app/Contents/MacOS/ ; cp ../Help.html \
            LDView.app/Contents/MacOS
    helpfile.depends = ../Help.html
    messagefile.target = LDView.app/Contents/MacOS/LDViewMessages.ini
    messagefile.commands = @$(CHK_DIR_EXISTS) LDView.app/Contents/MacOS/ || \
            $(MKDIR) LDView.app/Contents/MacOS/ ; cp ../LDViewMessages.ini \
            LDView.app/Contents/MacOS
    messagefile.depends = ../LDViewMessages.ini
    fontfile.target = LDView.app/Contents/MacOS/SansSerif.fnt
    fontfile.commands = @$(CHK_DIR_EXISTS) LDView.app/Contents/MacOS/ || \
            $(MKDIR) LDView.app/Contents/MacOS/ ; cp ../Textures/SansSerif.fnt \
            LDView.app/Contents/MacOS
    fontfile.depends = ../Textures/SansSerif.fnt
    QMAKE_EXTRA_TARGETS += helpfile messagefile fontfile
    POST_TARGETDEPS += LDView.app/Contents/MacOS/LDViewMessages.ini \
            LDView.app/Contents/MacOS/Help.html \
            LDView.app/Contents/MacOS/SansSerif.fnt
}

# Input
SOURCES += \
    AlertHandler.cpp \
    LDViewBoundingBox.cpp \
    LDViewCameraLocation.cpp \
    LDViewCustomizeToolbar.cpp \
    LDViewErrors.cpp \
    LDViewExportOption.cpp \
    LDViewJpegOptions.cpp \
    LDViewLatitudeLongitude.cpp \
    LDViewMainWindow.cpp \
    LDViewModelTree.cpp \
    LDViewMpdModel.cpp \
    LDViewPartList.cpp \
    LDViewRotationCenter.cpp \
    LDViewSnapshotSettings.cpp \
    LDViewStatistics.cpp \
    misc.cpp \
    ModelViewerWidget.cpp \
    Preferences.cpp \
    QTMain.cpp \
    QtWebClientPlugin.cpp \
    SnapshotAlertHandler.cpp \
    SnapshotTaker.cpp
HEADERS += \
    About.h \
    AlertHandler.h \
    Help.h \
    LDViewBoundingBox.h \
    LDViewCameraLocation.h \
    LDViewCustomizeToolbar.h \
    LDViewErrors.h \
    LDViewExportOption.h \
    LDViewJpegOptions.h \
    LDViewLatitudeLongitude.h \
    LDViewMainWindow.h \
    LDViewModelTree.h \
    LDViewMpdModel.h \
    LDViewPartList.h \
    LDViewRotationCenter.h \
    LDViewSnapshotSettings.h \
    LDViewStatistics.h \
    misc.h \
    ModelViewerWidget.h \
    OpenGLExtensions.h \
    Preferences.h \
    QtWebClientPlugin.h \
    SnapshotAlertHandler.h \
    SnapshotTaker.h
FORMS = \
    AboutPanel.ui \
    BoundingBoxPanel.ui \
    CameraLocationPanel.ui \
    CustomizeToolbar.ui \
    ErrorPanel.ui \
    ExportOptionPanel.ui \
    HelpPanel.ui \
    JpegOptionsPanel.ui \
    LatitudeLongitude.ui \
    LDView.ui \
    ModelTreePanel.ui \
    MpdModelSelectionPanel.ui \
    OpenGLExtensionsPanel.ui \
    PartList.ui \
    PreferencesPanel.ui \
    RotationCenterPanel.ui \
    SnapshotSettingsPanel.ui \
    StatisticsPanel.ui
TRANSLATIONS += \
    ldview_cz.ts \
    ldview_de.ts \
    ldview_en.ts \
    ldview_hu.ts \
    ldview_it.ts
OTHER_FILES += LDView.1 \
               makeall \
               makeclean
RESOURCES    = resources.qrc
