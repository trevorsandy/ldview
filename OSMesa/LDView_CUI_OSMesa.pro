######################################################################
# Automatically generated by qmake (2.01a) Sat 3. Jun 19:52:21 2017
######################################################################

TEMPLATE       = app
TARGET         = LDView
QT            += core
QT            -= opengl
QT            -= gui
CONFIG        -= qt
CONFIG        -= opengl
CONFIG        += thread
CONFIG        += static
CONFIG        += warn_on
win32: CONFIG += console
macx:  CONFIG -= app_bundle # do not bundle macOS app

QMAKE_CXXFLAGS+= $(Q_CXXFLAGS)
QMAKE_CFLAGS  += $(Q_CFLAGS)
QMAKE_LFLAGS  += $(Q_LDFLAGS)

contains(DEFINES, _QT): \
DEFINES       -= _QT
DEFINES       += _OSMESA

include(../LDViewGlobal.pri)

DEFINES += ARCH=\\\"$$join(ARCH,,,bit)\\\"

message("~~~ $$upper($${TARGET}) ($$join(ARCH,,,bit)) VERSION $$VERSION CUI EXECUTABLE - $${BUILD} ~~~")

win32 {
    QMAKE_TARGET_COMPANY = "Travis Cobbs"
    QMAKE_TARGET_DESCRIPTION = "$${TARGET} LDraw Model Viewer - LPub3D Edition"
    QMAKE_TARGET_COPYRIGHT = "Copyright (c) 2025 Travis Cobbs & Peter Bartfai"
    QMAKE_TARGET_PRODUCT = "$${TARGET} OSMesa CUI ($$join(ARCH,,,bit)) - LPub3D Edition"
    RC_LANG = "English (United Kingdom)"
    RC_ICONS = "../Icons/LDViewIcon.ico"
    msys: \
    QMAKE_LFLAGS += -Wl,--allow-multiple-definition
}

unix|msys {
    !macx: TARGET = $$lower($${TARGET})
    exists($${OSMESA_INC}/GL/osmesa.h):!USE_SYSTEM_LIBS {
        message("~~~ NOTICE: Using LDView Pre-defined OSMESA library ~~~")
    } else:USE_SYSTEM_LIBS:!USE_OSMESA_STATIC {
        exists($${OSMESA_LOCAL_PREFIX_}/include/GL/osmesa.h): message("~~~ NOTICE: Using LOCAL OSMESA library ~~~")
        else:exists($${SYSTEM_PREFIX_}/include/GL/osmesa.h): message("~~~ NOTICE: Using SYSTEM OSMESA library ~~~")
        else:exists($${SYSTEM_PREFIX_}/X11/include/GL/osmesa.h): message("~~~ NOTICE: Using X11 SYSTEM OSMESA library ~~~")
    } else:USE_3RD_PARTY_LIBS:contains(USE_SYSTEM_OSMESA_LIB, YES) {
        exists($${SYSTEM_PREFIX_}/X11/include/GL/osmesa.h): message("~~~ NOTICE: Using X11 SYSTEM OSMESA library ~~~")
        else:exists($${SYSTEM_PREFIX_}/include/GL/osmesa.h): message("~~~ NOTICE: Using SYSTEM OSMESA library ~~~")
    } else:USE_OSMESA_STATIC {
        message("~~~ NOTICE: Using OSMESA BUILT FROM SOURCE library ~~~")
    } else {
        message("CRITICAL: OSMESA LIBRARIES NOT FOUND!")
    }
}

3RD_PARTY_INSTALL {
    message("~~~ OSMESA CUI 3RD PARTY INSTALL PREFIX $${3RD_PREFIX} ~~~")

    isEmpty(3RD_PACKAGE_VER):3RD_PACKAGE_VER = $$TARGET-$$VER_MAJ"."$$VER_MIN
    isEmpty(3RD_BINDIR):3RD_BINDIR           = $$absolute_path($$3RD_PREFIX/$$3RD_PACKAGE_VER/bin/$$QT_ARCH)
    isEmpty(3RD_LIBDIR):3RD_LIBDIR           = $$absolute_path($$3RD_PREFIX/$$3RD_PACKAGE_VER/lib/$$QT_ARCH)
    isEmpty(3RD_DOCDIR):3RD_DOCDIR           = $$absolute_path($$3RD_PREFIX/$$3RD_PACKAGE_VER/docs)
    isEmpty(3RD_RESOURCES):3RD_RESOURCES     = $$absolute_path($$3RD_PREFIX/$$3RD_PACKAGE_VER/resources)

    NO_HEADERS_INSTALL {
        message("~~~ $$upper( $${TARGET} ) HEADERS WILL NOT BE INSTALLED ~~~")
    } ELSE {
        isEmpty(3RD_HEADERS):3RD_HEADERS     = $$absolute_path($$3RD_PREFIX/$$3RD_PACKAGE_VER/include)

        HEADER_CHECK_MSG = Project MESSAGE: ~~~ $$upper( $$TARGET ) HEADERS COPIED TO $${3RD_HEADERS} ~~~

        mingw:ide_qtcreator {
            DELETE_HEADER_FOLDERS_CMD = IF EXIST \"$$shell_path($${3RD_HEADERS})\" \( RD /S /Q $$shell_path($${3RD_HEADERS}) \)
            MAKE_DIR_CMD = MD
            COPY_CMD = COPY /V /Y
            HEADER_CHECK_CMD = IF EXIST \"$$shell_path($${3RD_HEADERS}/TCFoundation/TCObject.h)\" \( ECHO $${HEADER_CHECK_MSG} \)
        } else {
            DELETE_HEADER_FOLDERS_CMD = if test -e $$shell_path($${3RD_HEADERS}); then rm -rf $$shell_path($${3RD_HEADERS}); fi;
            MAKE_DIR_CMD = mkdir -p
            COPY_CMD = cp -f
            HEADER_CHECK_CMD = if test -f $$shell_path($${3RD_HEADERS}/TCFoundation/TCObject.h); then echo $${HEADER_CHECK_MSG}; fi
        }
        #message("~~~ DEBUG_DELETE_HEADER_FOLDERS_CMD: $$DELETE_HEADER_FOLDERS_CMD ~~~")

        CREATE_HEADER_FOLDERS_CMD = \
            $${MAKE_DIR_CMD} \
            $$shell_path($${3RD_HEADERS}/LDExporter) \
            $$shell_path($${3RD_HEADERS}/LDLib) \
            $$shell_path($${3RD_HEADERS}/LDLoader) \
            $$shell_path($${3RD_HEADERS}/TRE) \
            $$shell_path($${3RD_HEADERS}/TCFoundation) \
            $$shell_path($${3RD_HEADERS}/GL)
        msys: \
        CREATE_HEADER_FOLDERS_CMD += \
            $$shell_path($${3RD_HEADERS}/3rdParty) 2> $$NULL_DEVICE
        else: \
        CREATE_HEADER_FOLDERS_CMD += \
            $$shell_path($${3RD_HEADERS}/3rdParty/minizip) 2> $$NULL_DEVICE
        #message("~~~ DEBUG_CREATE_HEADER_FOLDERS_CMD: $$CREATE_HEADER_FOLDERS_CMD ~~~")

        COPY_HEADERS_CMD =       $${COPY_CMD} $$shell_path($$absolute_path(../TCFoundation/*.h)) $$shell_path($${3RD_HEADERS}/TCFoundation/) \
            $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../LDExporter/*.h)) $$shell_path($${3RD_HEADERS}/LDExporter/) \
            $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../LDLoader/*.h)) $$shell_path($${3RD_HEADERS}/LDLoader/) \
            $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../LDLib/*.h)) $$shell_path($${3RD_HEADERS}/LDLib/) \
            $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../TRE/*.h)) $$shell_path($${3RD_HEADERS}/TRE/) \
            $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../include/*.h)) $$shell_path($${3RD_HEADERS}/3rdParty/) \
            $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../include/GL/*.h)) $$shell_path($${3RD_HEADERS}/GL/)
        !msys: \
        COPY_HEADERS_CMD += \
            $$escape_expand(\n\t)$${COPY_CMD} $$shell_path($$absolute_path(../3rdParty/minizip/*.h)) $$shell_path($${3RD_HEADERS}/3rdParty/minizip/)

        delete_header_folders.target = DeleteHeaderFolders
        delete_header_folders.commands = $${DELETE_HEADER_FOLDERS_CMD}

        create_header_folders.target = CreateHeaderFolders
        create_header_folders.depends = DeleteHeaderFolders
        create_header_folders.commands = $${CREATE_HEADER_FOLDERS_CMD}

        copy_headers.target = CopyHeaders
        copy_headers.depends = CreateHeaderFolders
        copy_headers.commands = $${COPY_HEADERS_CMD}

        copy_headers_check.target = HeadersCheck
        copy_headers_check.depends = CopyHeaders
        copy_headers_check.commands = $${HEADER_CHECK_CMD}

        QMAKE_EXTRA_TARGETS += delete_header_folders create_header_folders copy_headers copy_headers_check
        PRE_TARGETDEPS += CopyHeaders HeadersCheck
    }

    target.path              = $${3RD_BINDIR}
    documentation.path       = $${3RD_DOCDIR}
    documentation.files      = ../Readme.txt ../Help.html ../license.txt \
                               ../ChangeHistory.html ldview.1
    resources.path           = $${3RD_RESOURCES}
    resources.files          = ../m6459.ldr ../8464.mpd ldviewrc.sample \
                               ../LDViewMessages.ini ../LDExporter/LDExportMessages.ini \
                               ../LDExporter/LGEO.xml
    resources_config.path    = $${3RD_RESOURCES}/config
    resources_config.files   = ldview.ini ldviewPOV.ini LDViewCustomIni

    libraries.path           = $${3RD_LIBDIR}
    libraries.files          = ../TCFoundation/$$DESTDIR/libTCFoundation$${POSTFIX}.$${EXT_S} \
                               ../LDLoader/$$DESTDIR/libLDLoader$${POSTFIX}.$${EXT_S} \
                               ../TRE/$$DESTDIR/libTRE$${POSTFIX}.$${EXT_S} \
                               ../LDLib/$$DESTDIR/libLDLib$${POSTFIX}.$${EXT_S} \
                               ../LDExporter/$$DESTDIR/libLDExporter$${POSTFIX}.$${EXT_S}

    contains(USE_3RD_PARTY_3DS, YES) {
        exists($$OUT_PWD/$${3DS_LDLIBS}): 3DS_LIB_FOUND = YES
        else: message("~~~ 3DS Library not found at $$OUT_PWD/$${3DS_LDLIBS} ~~~")
    } else:USE_3RD_PARTY_PREBUILT_3DS {
        # pre-built 3ds path is already abs so use without $$OUT_PWD
        exists($${3DS_LDLIBS}): 3DS_LIB_FOUND = YES
        else: message("~~~ 3DS Library not found at $${3DS_LDLIBS} ~~~")
    }
    contains(3DS_LIB_FOUND, YES) {
        # Treat Mageia 'error adding symbols: Archive has no index...'
        contains(HOST,Mageia) {
            message("~~~ COPY lib$${LIB_3DS}.$${EXT_S} TO $${3RD_LIBDIR}/ ~~~")
            3RD_3DS_COPY_CMD = if ! test -e $${3RD_LIBDIR}; then mkdir -p $${3RD_LIBDIR}; fi; \
                               cp -f $${3DS_LDLIBS} $${3RD_LIBDIR}/
            system( $${3RD_3DS_COPY_CMD} )
        } else {
            libraries.files += $${3DS_LDLIBS}
        }
    }
    contains(USE_3RD_PARTY_PNG, YES) {
        exists($$OUT_PWD/$${PNG_LDLIBS}): \
        libraries.files     += $${PNG_LDLIBS}
        else: message("~~~ PNG Library not found at $$OUT_PWD/$${PNG_LDLIBS} ~~~")
    }
    contains(USE_3RD_PARTY_JPEG, YES) {
        exists($$OUT_PWD/$${JPEG_LDLIBS}): \
        libraries.files     += $${JPEG_LDLIBS}
        else: message("~~~ JPEG Library not found at $$OUT_PWD/$${JPEG_LDLIBS} ~~~")
    }
    contains(USE_3RD_PARTY_GL2PS, YES) {
        exists($$OUT_PWD/$${GL2PS_LDLIBS}): \
        libraries.files     += $${GL2PS_LDLIBS}
        else: message("~~~ GL2PS Library not found at $$OUT_PWD/$${GL2PS_LDLIBS} ~~~")
    }
    contains(USE_3RD_PARTY_TINYXML, YES) {
        exists($$OUT_PWD/$${TINYXML_LDLIBS}): \
        libraries.files     += $${TINYXML_LDLIBS}
        else: message("~~~ TINYXML Library not found at $$OUT_PWD/$${TINYXML_LDLIBS} ~~~")
    }
    contains(USE_3RD_PARTY_MINIZIP, YES):!USE_3RD_PARTY_PREBUILT_MINIZIP {
        exists($$OUT_PWD/$${MINIZIP_LDLIBS}): \
        libraries.files     += $${MINIZIP_LDLIBS}
        else: message("~~~ MINIZIP Library not found at $$OUT_PWD/$${MINIZIP_LDLIBS} ~~~")
    } else:USE_3RD_PARTY_PREBUILT_MINIZIP {
        # pre-built minizip path is already abs so use without $$OUT_PWD
        exists($${MINIZIP_LDLIBS}): \
        libraries.files     += $${MINIZIP_LDLIBS}
        else: message("~~~ MINIZIP Library not found at $${MINIZIP_LDLIBS} ~~~")
    }

    INSTALLS += target documentation resources resources_config libraries

} else {

    unix|msys:!macx {
        isEmpty(PREFIX_):PREFIX_  = $${PREFIX}/usr
        isEmpty(BINDIR):BINDIR    = $$PREFIX_/bin
        isEmpty(DATADIR):DATADIR  = $$PREFIX_/share
        isEmpty(DOCDIR):DOCDIR    = $$DATADIR/doc
        isEmpty(MANDIR):MANDIR    = $$DATADIR/man

        target.path               = $${BINDIR}
        documentation.path        = $${DOCDIR}/$${TARGET}
        documentation.files       = ../Readme.txt ../Help.html ../license.txt \
                                    ../m6459.ldr \
                                    ../ChangeHistory.html ../8464.mpd todo.txt \
                                    ../Textures/SansSerif.fnt \
                                    ../LDExporter/LGEO.xml
        man.path                  = $${MANDIR}/man1
        man.extra                 = $(INSTALL_FILE) ../QT/LDView.1 ../QT/desktop/ldraw-thumbnailer.1 $(INSTALL_ROOT)$${MANDIR}/man1 ; $(COMPRESS) $(INSTALL_ROOT)$${MANDIR}/man1/*.1
        INSTALLS += target documentation
    }

}

INCLUDEPATH += $${LIBS_INC}

macx: LIBS += $${OSX_FRAMEWORKS_CORE}

LDLIBDIRS = \
    -L../LDLoader/$$DESTDIR \
    -L../LDLib/$$DESTDIR \
    -L../LDExporter/$$DESTDIR \
    -L../TRE/$$DESTDIR \
    -L../TCFoundation/$$DESTDIR

LIBDIRS += $${LDLIBDIRS}

LDLIBS = \
    ../LDLoader/$$DESTDIR/$${LIB_LDLOADER} \
    ../LDLib/$$DESTDIR/$${LIB_LDLIB} \
    ../LDExporter/$$DESTDIR/$${LIB_LDEXPORTER} \
    ../TRE/$$DESTDIR/$${LIB_TRE} \
    ../TCFoundation/$$DESTDIR/$${LIB_TCFOUNDATION}

_LIBS = \
    -lLDLoader$${POSTFIX} \
    -lLDLib$${POSTFIX} \
    -lLDExporter$${POSTFIX} \
    -lTRE$${POSTFIX} \
    -lTCFoundation$${POSTFIX}

# Platform-specific
unix {
    freebsd {
        LIBDIRS += -L/usr/local/lib
    }

    # slurm is media.peeron.com
    OSTYPE = $$system(hostname)
    contains(OSTYPE, slurm) {
        LIBDIRS  -= $${OSMESA_LIBDIR}
        LIBDIRS  += -L../../Mesa-7.0.2/lib
        CONFIG   -= static  # reverse static directive - not sure about this ?
    }

    OSTYPE = $$system(hostname | cut -d. -f2-)
    contains(OSTYPE, pair.com) {
        LIBDIRS  -= $${OSMESA_LIBDIR}
        LIBDIRS  += -L../../Mesa-7.11/lib -L/usr/local/lib/pth -L/usr/local/lib
        LIBS_    += -lpth
    }
}

USE_OSMESA_STATIC {
    OSMESA_NO_LLVM {
        message("~~~ LLVM not needed for specified OSMesa configuration ~~~")
    } else {
        isEmpty(LLVM_PREFIX_): LLVM_PREFIX_ = $${SYSTEM_PREFIX_}
        exists($${LLVM_PREFIX_}/bin/llvm-config) {
            LLVM_LDFLAGS   = $$system($${LLVM_PREFIX_}/bin/llvm-config --ldflags)
            LLVM_LIBS     += $${LLVM_LDFLAGS}
            isEmpty(LLVM_LDFLAGS): message("~~~ LLVM - ERROR llvm ldflags not found ~~~")
            LLVM_LIB_NAME  = $$system($${LLVM_PREFIX_}/bin/llvm-config --libs engine mcjit)
            LLVM_LIBS     += $${LLVM_LIB_NAME}
            isEmpty(LLVM_LIBS): message("~~~ LLVM - ERROR llvm library not found ~~~")
            _LIBS         += $${LLVM_LIBS}
        } else {
            message("~~~ LLVM - ERROR llvm-config not found ~~~")
        }
    }
}

# override system or 3rdparty libraries as specified
# these will be empty when not specifically defined
if (USE_SYSTEM_LIBS|USE_3RD_PARTY_LIBS) {
    LIBS_ += \
        $${PNG_LDLIBS} \
        $${JPEG_LDLIBS} \
        $${3DS_LDLIBS} \
        $${GL2PS_LDLIBS} \
        $${TINYXML_LDLIBS} \
        $${MINIZIP_LDLIBS} \
        $${ZLIB_LDLIBS}
}

LIBS_  += $${LIBS_PRI}

msys: \
LIBS_  += -lshlwapi -lws2_32 -lbz2

LDLIBS += $${_LIBS} $${LIBS_} $${OSMESA_LDLIBS} $${EGL_LDLIBS} $${OSMESA_LDFLAGS}

LIBS   += $${LIBDIRS} $${LIBS_DIR} $${LDLIBS}
#message("~~~ DEBUG_INCLUDEPATHS: $$INCLUDEPATH ~~~")
#message("~~~ DEBUG_OSMESA_LDLIBS: $$OSMESA_LDLIBS ~~~")
#message("~~~ DEBUG_OSMESA_LDFLAGS: $$OSMESA_LDFLAGS ~~~")
#message("~~~ DEBUG_LIBS: $$LIBS ~~~")

mingw:ide_qtcreator: \
LDV_CONCAT_CMD          = TYPE
else:LDV_CONCAT_CMD     = cat
msys:LDV_HEADERIZE_EXE  = $$DESTDIR/Headerize$${POSTFIX}.exe
else:LDV_HEADERIZE_EXE  = $$DESTDIR/Headerize$${POSTFIX}
LDV_HEADERIZE           = $$shell_path($$absolute_path($${OUT_PWD}/$${LDV_HEADERIZE_EXE}))
LDV_MESSAGES            = $$shell_path($$absolute_path($$_PRO_FILE_PWD_/../LDViewMessages.ini))
LDV_EXPORT_MESSAGES     = $$shell_path($$absolute_path($$_PRO_FILE_PWD_/../LDExporter/LDExportMessages.ini))
LDV_STUD_LOGO_TEXTURE   = $$shell_path($$absolute_path($$_PRO_FILE_PWD_/../Textures/StudLogo.png))
LDV_CONCAT_MESSAGES     = $$shell_path($$absolute_path($$_PRO_FILE_PWD_/LDViewMessages.ini))
LDV_MESSAGES_HEADER     = $$shell_path($$absolute_path($$_PRO_FILE_PWD_/LDViewMessages.h))
LDV_STUD_LOGO_HEADER    = $$shell_path($$absolute_path($$_PRO_FILE_PWD_/StudLogo.h))
LDV_CONCAT_MESSAGES_CMD = $$LDV_CONCAT_CMD $$LDV_MESSAGES $$LDV_EXPORT_MESSAGES > $$LDV_CONCAT_MESSAGES
#message("~~~ DEBUG_LDV_CONCAT_MESSAGES_CMD $$LDV_CONCAT_MESSAGES_CMD ~~~")

BUILD_FLATPAK {
    system($$LDV_CONCAT_MESSAGES_CMD)
    exists($$LDV_CONCAT_MESSAGES): \
    message("~~~ MESSAGES $$LDV_CONCAT_MESSAGES concatenated ~~~")
    else: message("~~~ ERROR $$LDV_CONCAT_MESSAGES was not concatenated ~~~")
} else {
    concat_messages.target   = ConcatenateMessages
    concat_messages.depends  = $$LDV_MESSAGES $$LDV_EXPORT_MESSAGES
    concat_messages.commands = $$LDV_CONCAT_MESSAGES_CMD
    QMAKE_EXTRA_TARGETS     += concat_messages
    PRE_TARGETDEPS          += ConcatenateMessages
}

!equals(PWD, $${OUT_PWD}) {
    message("~~~ YESSIR! SHADOW BUILDING ~~~")
    mingw:ide_qtcreator: \
    LDV_MOVE_CMD = && MOVE /Y
    else: \
    LDV_MOVE_CMD = ; mv -f
    LDV_HEADERIZE_MESSAGES_CMD = $$LDV_HEADERIZE $$LDV_CONCAT_MESSAGES $$LDV_MOVE_CMD LDViewMessages.h $$LDV_MESSAGES_HEADER 2> $$NULL_DEVICE
    LDV_HEADERIZE_STUDLOGO_CMD = $$LDV_HEADERIZE $$LDV_STUD_LOGO_TEXTURE $$LDV_MOVE_CMD StudLogo.h $$LDV_STUD_LOGO_HEADER 2> $$NULL_DEVICE
} else {
    message("~~~ NOSIR! NOT SHADOW BUILDING ~~~")
    LDV_HEADERIZE_MESSAGES_CMD = $$LDV_HEADERIZE $$LDV_CONCAT_MESSAGES 2> $$NULL_DEVICE
    LDV_HEADERIZE_STUDLOGO_CMD = $$LDV_HEADERIZE $$LDV_STUD_LOGO_TEXTURE 2> $$NULL_DEVICE
}
#message("~~~ DEBUG_LDV_HEADERIZE_MESSAGES_CMD $$LDV_HEADERIZE_MESSAGES_CMD ~~~")
#message("~~~ DEBUG_LDV_HEADERIZE_STUDLOGO_CMD $$LDV_HEADERIZE_STUDLOGO_CMD ~~~")

headerize_messages.target   = LDViewMessagesHeader
headerize_messages.depends  = $$LDV_HEADERIZE_EXE
!BUILD_FLATPAK: \
headerize_messages.depends += ConcatenateMessages
headerize_messages.commands = $$LDV_HEADERIZE_MESSAGES_CMD

headerize_studlogo.target   = StudLogoHeader
headerize_studlogo.depends  = $$LDV_HEADERIZE_EXE $$LDV_STUD_LOGO_TEXTURE
headerize_studlogo.commands = $$LDV_HEADERIZE_STUDLOGO_CMD

QMAKE_EXTRA_TARGETS        += headerize_messages headerize_studlogo
PRE_TARGETDEPS             += LDViewMessagesHeader StudLogoHeader

# tests on posix (linux, MSYS2 and OSX)
BUILD_CHECK {
    LDV_RC_DIR     = $${_PRO_FILE_PWD_}
    LDV_MPD_FILE   = $${_PRO_FILE_PWD_}/../8464.mpd
    LDV_CUSTOM_INI = $${_PRO_FILE_PWD_}/LDViewCustomIni
    include(../LDViewTest.pri)
}

QMAKE_CLEAN += LDViewMessages.ini LDViewMessages.h StudLogo.h

# Input
HEADERS += GLInfo.h
SOURCES += ldview.cpp \
           GLInfo.cpp
OTHER_FILES += \
           LDViewCustomIni \
           ldview.1 \
           ldview.ini \
           ldviewPOV.ini \
           ldviewrc.sample
